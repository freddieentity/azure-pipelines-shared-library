variables:
  # Pipeline conditions
  IS_MAIN:           ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  IS_RELEASE:     ${{ eq(variables['Build.SourceBranch'], 'refs/heads/release') }}
  IS_TAG:            ${{ startsWith(variables['Build.SourceBranch'], 'refs/tags/v') }}
  IS_FORK:           ${{ eq(variables['System.PullRequest.IsFork'], 'True') }}
  IS_PR:             ${{ eq(variables['Build.Reason'], 'PullRequest') }}
  IS_SCHEDULED:      ${{ eq(variables['Build.Reason'], 'Schedule') }}
  IS_TRUSTEDCI:      ${{ and( eq(variables.isFork,'False'), eq(variables.isPR,'False'), eq(variables.isScheduled,'False') ) }}
  DEPLOY_MAIN:       ${{ and( eq(variables.isMain,'True'), eq(variables.isTrustedCI,'True') ) }}

  # ARM
  SONARQUBE_URL: http://sonarqube.127.0.0.1.nip.io
  VAULT_URL: http://vault.127.0.0.1.nip.io
  CONTAINER_REGISTRY_NAME: 0908887875
  CONTAINER_REGISTRY_CREDENTIALS: homelabregistrycredentials
  APPLICATION_DOMAIN: 127.0.0.1.nip.io

  # Weather Service
  WEATHER_SERVICE_ADDR: weatherservice
  WEATHER_SERVICE_PORT: 8080

  # OpenTelemetry Collector
  OTEL_COLLECTOR_HOST: otelcol
  OTEL_COLLECTOR_PORT: 4317
  OTEL_EXPORTER_OTLP_ENDPOINT: http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT}
  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
  PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://localhost:4318/v1/traces

  # Kafka
  KAFKA_SERVICE_PORT: 9092
  KAFKA_SERVICE_ADDR: kafka:${KAFKA_SERVICE_PORT}

  # Redis
  REDIS_PORT: 6379
  REDIS_ADDR: redis-cart:${REDIS_PORT}

  # Grafana
  GRAFANA_SERVICE_PORT: 3000
  GRAFANA_SERVICE_HOST: grafana

  # Jaeger
  JAEGER_SERVICE_PORT: 16686
  JAEGER_SERVICE_HOST: jaeger

  # Prometheus
  PROMETHEUS_SERVICE_PORT: 9090
  PROMETHEUS_SERVICE_HOST: prometheus
  PROMETHEUS_ADDR: ${PROMETHEUS_SERVICE_HOST}:${PROMETHEUS_SERVICE_PORT}

  # To be overwritten by each environment YAML
  SC_ARM: SC NonProd ARM
  KUBERNETES_CLUSTER: SC NonProd K8S