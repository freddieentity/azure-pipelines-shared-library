parameters:
- name: environment
  type: string
  default: Development
- name: enabled
  type: boolean
  default: true
- name: stageName
  type: string
  default: ''
- name: stageDependencies 
  type: object 
  default: 
- name: deploymentPoolName
  type: string
  default: 'Homelabpool'
- name: azureServiceConnection
  type: string
- name: resourceGroup
  type: string
- name: kubernetesCluster
  type: string
- name: kubernetesNamespace
  type: string
- name: containerRegistryName
  type: string
- name: containerImageName
  type: string
  default: ""
- name: containerImageTag
  type: string
  default: ""

stages:
  - stage: ${{ parameters.stageName }}
    displayName: ${{ parameters.stageName }}
    # condition: 
    dependsOn: ${{ parameters.stageDependencies }}
    # pool:
    jobs:
    - deployment: 
      # displayName: ${{ parameters.stageName }} 
      pool:
        name: ${{ parameters.deploymentPoolName }} 
      environment: ${{ parameters.environment }}
      strategy:
        runOnce:
          deploy:
            steps:
            - download: none

            - task: DownloadBuildArtifacts@1
              displayName: 'Download CI Pipeline Variables Artifact'
              inputs:
                buildType: 'specific'
                project: 'HomeLab'
                pipeline: $(Resources.TriggeringAlias)
                buildVersionToDownload: 'latest'
                downloadType: 'specific'
                downloadPath: '$(System.ArtifactsDirectory)'

            - script: |
                # cat $(Agent.BuildDirectory)/$(Resources.TriggeringAlias)/$(Resources.TriggeringAlias).env
                cat $(System.ArtifactsDirectory)/$(Resources.TriggeringAlias)/$(Resources.TriggeringAlias).env
              displayName: 'Restore Environment Variables From Triggering CI Pipeline'

            - script: | 
                echo "CONTAINER_IMAGE_NAME:$(CONTAINER_IMAGE_NAME)"
                echo "CONTAINER_IMAGE_TAG:$(CONTAINER_IMAGE_TAG)"
              displayName: 'Print Triggering CI Pipeline Outputs'

            # - bash: |
            #     kind create cluster --name=${{ parameters.kubernetesCluster }}
            #   displayName: Provision Environment Infrastructure

            - bash: |                
                # kubectl config use-context ${{ parameters.kubernetesCluster }}
                kubectl config use-context kind-homelab
                helm upgrade --install $(CONTAINER_IMAGE_NAME) oci://${{ parameters.containerRegistryName }}/helm/$(CONTAINER_IMAGE_NAME) --version $(CONTAINER_IMAGE_TAG) --namespace ${{ parameters.kubernetesNamespace }} --create-namespace
                helm history $(CONTAINER_IMAGE_NAME) --namespace ${{ parameters.kubernetesNamespace }}
              displayName: 'Deploy Helm Chart Artifact'

            - bash: |
                # kubectl config use-context ${{ parameters.kubernetesCluster }}
                kubectl config use-context kind-homelab
                helm rollback $(CONTAINER_IMAGE_NAME) 0 # Previous release
                helm history $(CONTAINER_IMAGE_NAME) --namespace ${{ parameters.kubernetesNamespace }}
              displayName: 'Rollback Previous Helm Release'
              condition: failed()

            # - bash: |
            #     kind delete cluster --name=${{ parameters.kubernetesCluster }}
            #   displayName: Delete Environment Infrastructure

            # - checkout: git://HomeLab/helm-charts

            # - bash: | # when checkout one repo, the repo itself will be cloned to $(Agent.BuildDirectory)/s/
            #     kubectl config use-context kind-homelab
            #     helm upgrade -i ${{ parameters.microserviceName }} $(Agent.BuildDirectory)/s/${{ parameters.microserviceName }} \
            #     --set "ingress.hosts[0].host=abc.127.0.0.1.nip.io,ingress.hosts[0].paths[0].path=/,ingress.hosts[0].paths[0].pathType=Prefix"
 
            #   displayName: Helm Install
            