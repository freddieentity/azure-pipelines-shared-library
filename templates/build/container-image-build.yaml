parameters:
- name: enabled
  type: boolean
  default: true
- name: stageName
  type: string
  default: Build
- name: stageDependencies 
  type: object 
  default: 
- name: containerRegistryName
  type: string
- name: containerImageName
  type: string
- name: containerImageTag
  type: string
  default: $(Build.BuildNumber)
- name: helmRemoteChartRepositoryURL
  type: string
  default: "https://freddieentity.github.io/universal-helm-charts"
- name: helmRemoteChartRepositoryName
  type: string
  default: "universal-helm-charts"
- name: helmChartPath
  type: string
  default: "./deploy/helm"
- name: helmChartName
  type: string
  default: ""
- name: helmChartVersion
  type: string
  default: ""

stages:
  - stage: ${{ parameters.stageName }}
    displayName: ${{ parameters.stageName }}
    # condition: |
    #   and
    #   (
    #     eq(dependencies.WebApp1.result, 'Succeeded'),
    #     in(dependencies.WebApp2.result, 'Succeeded', 'Skipped'),
    #     in(dependencies.DependentJob.result, 'Succeeded', 'Skipped')
    #   )
    dependsOn: ${{ parameters.stageDependencies }}
    # pool:
    jobs:
    - job: DockerContainerImageBuild
      displayName: Docker Container Image Build
      steps:
      # - template: ${{variables['System.DefaultWorkingDirectory']}}/templates/helpers/debug-vars.yaml
      # - template: ${{variables['System.DefaultWorkingDirectory']}}/templates/helpers/append-sha.yaml

      - bash: |
          docker build -t ${{ parameters.containerRegistryName }}/${{ parameters.containerImageName }}:${{ parameters.containerImageTag }} .
        displayName: Docker Build

      - task: Docker@2
        displayName: Registry - Login
        inputs:
          command: login
          containerRegistry: $(CONTAINER_REGISTRY_CREDENTIALS)

      - bash: |
          docker push ${{ parameters.containerRegistryName }}/${{ parameters.containerImageName }}:${{ parameters.containerImageTag }}
        displayName: Push container image

      - task: Docker@2
        displayName: Registry - Logout
        inputs:
          command: logout
          containerRegistry: $(CONTAINER_REGISTRY_CREDENTIALS)

      - task: AzureCLI@2
        displayName: 'Lock release candidate image'
        condition: eq(variables.IS_TAG, 'True')
        inputs:
          azureSubscription: $(SC_ARM)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az acr repository update \
              --name ${{ parameters.containerRegistryName }} \
              --image ${{ parameters.containerImageName }}:${{ parameters.containerImageTag }} \
              --write-enabled false

    - job: HelmPackageAndPublish
      displayName: Helm Package And Publish
      steps: 
      - task: AzureCLI@2
        displayName: Login to Azure Container Registry
        inputs:
          azureSubscription: $(CONTAINER_REGISTRY_CREDENTIALS)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az acr login --name ${{ parameters.containerRegistryName }}
      
      - bash: |
          helm repo add ${{ paramters.helmRemoteChartRepositoryName }} ${{ paramters.helmRemoteChartRepositoryURL }}
          helm dependency update ${{ paramters.helmChartPath }}
          helm search repo ${{ paramters.helmRemoteChartRepositoryName }}

          yq -i '.microservices-standard.image.repository = "${{ parameters.containerRegistryName }}"' ${{ paramters.helmChartPath }}/values.yaml  
          yq -i '.microservices-standard.image.tag = "${{ parameters.containerImageTag }}"' ${{ paramters.helmChartPath }}/values.yaml  
          yq -i '.microservices-standard.fullnameOverride = "${{ paramters.containerImageName }}"' ${{ paramters.helmChartPath }}/values.yaml  
          helm package ${{ paramters.helmChartPath }} --version ${{ paramters.containerImageTag }} --app-version ${{ paramters.containerImageTag }} --destination ${{ paramters.helmChartPath }}
          helm upgrade --install ${{ paramters.containerImageName }} --dry-run --debug ${{ paramters.helmChartPath }}
          helm push ${{ paramters.helmChartPath }}/${{ paramters.containerImageName }}-${{ paramters.containerImageTag }}.tgz oci://${{ parameters.containerRegistryName }}/helm 

          # helm repo add universal-helm-charts https://freddieentity.github.io/universal-helm-charts
          # helm dependency update ./deploy/helm
          # helm search repo universal-helm-charts

          # yq -i '.microservices-standard.image.repository = "freddieentity.azurecr.io"' ./deploy/helm/values.yaml  
          # yq -i '.microservices-standard.image.tag = "1.0.0"' ./deploy/helm/values.yaml  
          # yq -i '.microservices-standard.fullnameOverride = "testservice"' ./deploy/helm/values.yaml  
          # yq -i '.name = "testservice"' ./deploy/helm/Chart.yaml # Override chart name for specific microservices 

          # helm package ./deploy/helm --version 1.0.0 --app-version 1.0.0 --destination ./deploy/helm
          # helm upgrade --install testservice --dry-run --debug ./deploy/helm/testservice-1.0.0.tgz  
          # helm push ./deploy/helm/testservice-1.0.0.tgz oci://freddieentity.azurecr.io/helm 
        displayName: Helm Package Chart 

      - bash: |
          helm upgrade --install ${{ paramters.containerImageName }} oci://${{ paramters.containerRegistryName }}/helm/${{ paramters.containerImageName }}-${{ paramters.containerImageTag }}.tgz
        displayName: Helm Deploy