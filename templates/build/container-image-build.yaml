parameters:
- name: enabled
  type: boolean
  default: true
- name: stageName
  type: string
  default: Build
- name: stageDependencies 
  type: object 
  default: 
- name: containerRegistryName
  type: string
- name: containerImageName
  type: string
- name: containerImageTag
  type: string
  default: $(Build.BuildNumber)
- name: helmRemoteChartRepositoryURL
  type: string
  default: "https://freddieentity.github.io/universal-helm-charts"
- name: helmRemoteChartRepositoryName
  type: string
  default: "universal-helm-charts"
- name: helmChartPath
  type: string
  default: "./deploy/helm"
- name: helmChartName
  type: string
  default: ""
- name: helmChartVersion
  type: string
  default: ""

stages:
  - stage: ${{ parameters.stageName }}
    displayName: ${{ parameters.stageName }}
    # condition: |
    #   and
    #   (
    #     eq(dependencies.WebApp1.result, 'Succeeded'),
    #     in(dependencies.WebApp2.result, 'Succeeded', 'Skipped'),
    #     in(dependencies.DependentJob.result, 'Succeeded', 'Skipped')
    #   )
    dependsOn: ${{ parameters.stageDependencies }}
    # pool:
    jobs:
    - job: DockerContainerImageBuild
      displayName: Docker Container Image Build
      steps:
      # - template: ${{variables['System.DefaultWorkingDirectory']}}/templates/helpers/debug-vars.yaml
      # - template: ${{variables['System.DefaultWorkingDirectory']}}/templates/helpers/append-sha.yaml

      - bash: |
          docker build -t ${{ parameters.containerRegistryName }}/${{ parameters.containerImageName }}:${{ parameters.containerImageTag }} .
        displayName: Docker Build

      - task: Docker@2 # https://prcode.co.uk/2020/12/09/push-docker-image-to-acr-without-service-connection-in-azure-devops/
        displayName: Registry - Login
        inputs:
          command: login
          containerRegistry: $(CONTAINER_REGISTRY_CREDENTIALS)

      - bash: |
          docker push ${{ parameters.containerRegistryName }}/${{ parameters.containerImageName }}:${{ parameters.containerImageTag }}
        displayName: Push container image

      - task: Docker@2
        displayName: Registry - Logout
        inputs:
          command: logout
          containerRegistry: $(CONTAINER_REGISTRY_CREDENTIALS)

      - task: AzureCLI@2
        displayName: 'Lock release candidate image'
        condition: eq(variables.IS_TAG, 'True')
        inputs:
          azureSubscription: $(SC_ARM)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az acr repository update \
              --name ${{ parameters.containerRegistryName }} \
              --image ${{ parameters.containerImageName }}:${{ parameters.containerImageTag }} \
              --write-enabled false

    - job: HelmPackageAndPublish
      displayName: Helm Package And Publish
      dependsOn: DockerContainerImageBuild
      pool:
        name: Homelabpool
      steps: 
      # - task: AzureCLI@2
      #   displayName: Login to Azure Container Registry
      #   inputs:
      #     azureSubscription: $(CONTAINER_REGISTRY_CREDENTIALS)
      #     scriptType: bash
      #     scriptLocation: inlineScript
      #     inlineScript: |
      #       az acr login --name ${{ parameters.containerRegistryName }}
      
      - bash: |
          # Use standard helm chart for any microservices. Modify the chart version to match with container image tag by pull and re-package it then push to registry

          # In the context of individual microservices. Add the Helm repo 
          helm repo add ${{ parameters.helmRemoteChartRepositoryName }} ${{ parameters.helmRemoteChartRepositoryURL }}
          # Update the dependencies in the Chart.yaml in individual microservices
          helm dependency update ${{ parameters.helmChartPath }}
          # Check whether the remote repository contains standard charts is avaiable
          helm search repo ${{ parameters.helmRemoteChartRepositoryName }}

          # Modify build time Helm values
          yq -i '.microservices-standard.image.repository = "${{ parameters.containerRegistryName }}/${{ parameters.containerImageName }}"' ${{ parameters.helmChartPath }}/values.yaml  
          yq -i '.microservices-standard.image.tag = "${{ parameters.containerImageTag }}"' ${{ parameters.helmChartPath }}/values.yaml  
          yq -i '.microservices-standard.fullnameOverride = "${{ parameters.containerImageName }}"' ${{ parameters.helmChartPath }}/values.yaml  
          # Change the Chart name to make the package name corresponding to each microservices
          yq -i '.name = "${{ parameters.containerImageName }}"' ${{ parameters.helmChartPath }}/Chart.yaml # Override chart name for specific microservices 

          # Version by re-packaging the chart and push back to registry. The output artifact will be the chart name (microservices name) - its tag and .tgz
          helm package ${{ parameters.helmChartPath }} --version ${{ parameters.containerImageTag }} --app-version ${{ parameters.containerImageTag }} --destination ${{ parameters.helmChartPath }}
          # Check output manifests using previous created helm packaged chart
          helm upgrade --install ${{ parameters.containerImageName }} --dry-run --debug ${{ parameters.helmChartPath }}/${{ parameters.containerImageName }}-${{ parameters.containerImageTag }}.tgz
          # Store the built Helm chart to remote registry for Deployment stage
          helm push ${{ parameters.helmChartPath }}/${{ parameters.containerImageName }}-${{ parameters.containerImageTag }}.tgz oci://${{ parameters.containerRegistryName }}/helm 
        displayName: Helm Package Chart 
            
      # - task: HelmDeploy@0
      #   inputs:
      #     connectionType: 'Azure Resource Manager' # 'Azure Resource Manager' | 'Kubernetes Service Connection' | 'None'. Required. Connection Type. Default: Azure Resource Manager.
      #     azureSubscription: $(SC_ARM)
      #     azureResourceGroup: 'rg-homelab-online-boutique'
      #     kubernetesCluster: 'aks-homelab-online-boutique'
      #     namespace: 'default'
      #     command: 'upgrade' # 'create' | 'delete' | 'expose' | 'get' | 'init' | 'install' | 'login' | 'logout' | 'ls' | 'package' | 'rollback' | 'save' | 'upgrade' | 'uninstall'. Required. Command. Default: ls.
      #     #chartType: 'Name' # 'Name' | 'FilePath'. Required when command == install || command == upgrade. Chart Type. Default: Name.
      #     releaseName: ${{ parameters.containerImageName }}
      #     chartPath: oci://${{ parameters.containerRegistryName }}/helm/${{ parameters.containerImageName }}-${{ parameters.containerImageTag }}.tgz

      - bash: |
          kind config use-context kind-homelab
          helm upgrade --install ${{ parameters.containerImageName }} ${{ parameters.helmChartPath }}/${{ parameters.containerImageName }}-${{ parameters.containerImageTag }}.tgz
          helm history ${{ parameters.containerImageName }}
          # helm upgrade --install ${{ parameters.containerImageName }} oci://${{ parameters.containerRegistryName }}/helm/${{ parameters.containerImageName }}-${{ parameters.containerImageTag }}.tgz
        displayName: Helm Deploy